# syntax=docker/dockerfile:1.7
ARG SOURCE_DATE_EPOCH
ARG DEBIAN_SNAPSHOT

FROM node:18-slim@sha256:f9ab18e354e6855ae56ef2b290dd225c1e51a564f87584b9bd21dd651838830e

ARG SOURCE_DATE_EPOCH
ARG DEBIAN_SNAPSHOT

ENV SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH} \
    TZ=UTC \
    npm_config_cache=/npm-cache

# Copy vendor packages for offline use
COPY vendor /vendor

# Use vendored APT packages
RUN echo "ðŸ”Œ OFFLINE MODE: Using vendored packages" && \
    echo "deb [trusted=yes] file:/vendor/apt ./" > /etc/apt/sources.list && \
    apt-get -o Acquire::Check-Valid-Until=false update && \
    apt-get install -y --no-install-recommends curl && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /var/cache/ldconfig/aux-cache && \
    rm -rf /var/log/apt/* && \
    rm -rf /var/log/dpkg.log && \
    find /usr -exec touch -d "@${SOURCE_DATE_EPOCH}" {} +

WORKDIR /app

COPY simple-app/package*.json ./

RUN echo "ðŸ”Œ OFFLINE MODE: Using vendored npm packages" && \
    for f in /vendor/npm/*.tgz; do npm cache add "$f"; done && \
    npm ci --omit=dev --ignore-scripts --offline && \
    find /app -exec touch -d "@${SOURCE_DATE_EPOCH}" {} + && \
    rm -rf /npm-cache

COPY simple-app/server.js ./

EXPOSE 3000
CMD ["node", "server.js"]